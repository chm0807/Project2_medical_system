from pydantic import BaseModel, Field, EmailStr
from typing import Optional
from datetime import date, time

class DoctorCreate(BaseModel):
    first_name: str = Field(..., description="First name of the doctor")
    last_name: str = Field(..., description="Last name of the doctor")
    specialization: str = Field(..., description="Specialization of the doctor")
    phone: str = Field(..., description="Phone number of the doctor")
    address: Optional[str] = Field(None, description="Address of the doctor")
    email: EmailStr = Field(..., description="Email of the doctor")
class Doctor(DoctorCreate):
    id: int = Field(..., description="Doctor ID (autogenerated)")

class PatientCreate(BaseModel):
    first_name: str = Field(..., description="First name of the patient")
    last_name: str = Field(..., description="Last name of the patient")
    birth_date: date = Field(..., description="Birth date of the patient")
    phone: str = Field(..., description="Phone number of the patient")
    address: Optional[str] = Field(None, description="Address of the patient")
    email: EmailStr = Field(..., description="Email of the patient")

class Patient(PatientCreate):
    patient_id: int = Field(..., description="Patient ID (autogenerated)")

class AppointmentCreate(BaseModel):
    patient_id: int = Field(..., description="ID of the patient")
    doctor_id: int = Field(..., description="ID of the doctor")
    appointment_date: date = Field(..., description="Date of the appointment")
    appointment_time: time = Field(..., description="Time of the appointment")
    consultation_type: str = Field(..., description="Type of consultation")

class Appointment(AppointmentCreate):
    appointment_id: int = Field(..., description="Appointment ID (autogenerated)")

class MedicationCreate(BaseModel):
    name: str = Field(..., description="Name of the medication")
    description: Optional[str] = Field(None, description="Description of the medication")

class Medication(MedicationCreate):
    medication_id: int = Field(..., description="Medication ID (autogenerated)")

class PrescriptionCreate(BaseModel):
    patient_id: int = Field(..., description="ID of the patient")
    doctor_id: int = Field(..., description="ID of the doctor")
    prescription_date: date = Field(..., description="Date of the prescription")
    notes: Optional[str] = Field(None, description="Notes for the prescription")

class Prescription(PrescriptionCreate):
    prescription_id: int = Field(..., description="Prescription ID (autogenerated)")
